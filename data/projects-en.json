[{"slug":"humeia-inventory","title":"Humeia Inc.","period":"Oct 2023 – Mar 2024","role":"Backend (under mentor)","summary":"Built internal views to quickly identify where orders were stuck, speeding up inquiry handling.","problem":"Orders complete before stock is confirmed and many items are drop-shipped; pinpointing the cause (stock / shipping / flow) took time.","actions":["Implemented a one-page internal summary of Order → Stock → Shipping","Unified trace IDs across invoices, emails and logs","Provided a watchlist for items requiring manual confirmation (△)","Added a “first 3 checks” playbook for CS"],"result":"In a representative week, time-to-cause was ~10 minutes faster; engineering escalations dropped from 5/week to 2–3/week.","tech":["Java","Spring Boot","MySQL","JavaScript (Ajax)"],"tags":["Backend","Inventory","Ops"],"links":[{"href":"https://bier.jp/","label":"Bier.jp (site)"}]},{"slug":"yui-consulting-drs","title":"Yui Consulting","period":"Sep 2024 – (ongoing)","role":"Solo developer","summary":"Migrated medical fee printing from Access to DRS with accurate layout and figures.","problem":"Access-specific layouts can’t be reproduced as-is in DRS; code/master differences risked numeric mismatches; no migration assets existed.","actions":["Created a mapping table between Access and DRS fields/codes","Prototyped extraction in VBA, built production migration in C#/.NET with format conversions","Validated layout via PDF/printer tests and consistency scripts"],"result":"Cut-over completed on schedule; stable operation after go-live; assets reusable for other features.","tech":["C#",".NET","VBA","Excel","Access"],"tags":["Data Migration","Healthcare","Reports"],"links":[]},{"slug":"moneyforward-fy-rollover","title":"Money Forward, Inc.","period":"Mar – Apr 2025","role":"Intern Developer","summary":"Improved performance of fiscal year rollover to handle large datasets reliably.","problem":"Related data were queried per entry causing excessive DB calls; at scale this led to slowdowns and memory pressure.","actions":["Analyzed the whole flow to locate redundant lookups","Switched to bulk prefetch + in-memory cache","Introduced a feature flag for safe rollout","Measured before/after with large synthetic datasets"],"result":"Significantly fewer DB calls and shorter execution time; approach shared for reuse in similar features.","tech":["Ruby on Rails","PostgreSQL","Docker","RSpec"],"tags":["Performance","Batch","Caching"],"links":[]},{"slug":"fujitsu-japan-platform","title":"Fujitsu Japan","period":"Apr – May 2025","role":"Deployment support & testing","summary":"Prototyped automation for common platform rollout and clarified stabilization directions.","problem":"Complex, environment-dependent steps led to intermittent stops and low reproducibility.","actions":["Outlined deploy→configure→verify flow and added error tolerance","Defined configs in YAML and tested automation","Analyzed order dependencies (e.g., locale) and proposed improvements"],"result":"Full stability not reached yet, but causes and next steps were made clear for further rollout.","tech":["Azure","YAML"],"tags":["Platform","Automation"],"links":[]}]
