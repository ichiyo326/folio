[
  {
    "slug": "humeia-inventory",
    "title": "Humeia Inc.",
    "period": "Oct 2023 – Mar 2024",
    "role": "Backend (with mentor guidance)",
    "summary": "Added an internal view to quickly see where orders were stuck (stock/shipping/flow) and speed up handling.",
    "problem": "Orders are confirmed before stock and many are drop‑shipped, so finding the cause of a stopped order took time; CS/warehouse had to hop across multiple screens; escalations to engineers were frequent.",
    "actions": [
      "Implemented a single screen summarizing Order→Stock→Shipping status.",
      "Unified invoice/email/log numbers for cross‑department traceability.",
      "Auto‑listed items that require manual stock confirmation to prevent misses.",
      "Displayed three initial CS checks directly on the screen."
    ],
    "result": "In a representative week, average time‑to‑cause dropped from ~30min to ~20min; engineering escalations decreased from ~5/week to ~2–3/week.",
    "tech": [
      "Java",
      "Spring Boot",
      "MySQL",
      "JavaScript (Ajax)"
    ],
    "tags": [
      "Backend",
      "Inventory",
      "Ops"
    ],
    "links": [
      {
        "href": "https://bier.jp/",
        "label": "Bier.jp"
      }
    ]
  },
  {
    "slug": "moneyforward-fy-rollover",
    "title": "Money Forward, Inc.",
    "period": "Mar – Apr 2025",
    "role": "Intern Engineer",
    "summary": "Eliminated redundant lookups in fiscal year rollover; reduced SQL from hundreds/thousands to a single bulk fetch.",
    "problem": "When rolling the fiscal year, previous balances are carried as opening entries. Related info (accounts, partners, etc.) was queried per entry, making SQL calls scale with entries and slowing the job.",
    "actions": [
      "Traced the flow and pinpointed where repeated SQL calls occurred.",
      "Switched to bulk prefetch with an in‑memory cache.",
      "Introduced a feature flag to safely toggle the change.",
      "Benchmarked 1/100/1,000 entries, comparing SQL calls and runtime."
    ],
    "result": "Per‑entry queries collapsed into a single bulk fetch. For ~1,000 entries, SQL calls dropped from 1,000+ to 1; runtime shrank from ~30s to the teens; memory usage roughly halved.",
    "tech": [
      "Rails",
      "PostgreSQL",
      "RSpec (measurement)",
      "Docker",
      "GitHub"
    ],
    "tags": [
      "Performance",
      "Batch",
      "Caching"
    ],
    "links": []
  },
  {
    "slug": "fujitsu-japan-platform",
    "title": "Fujitsu Japan",
    "period": "Apr – May 2025",
    "role": "Deployment Support (Intern)",
    "summary": "Assisted rollout of a common platform: handled deploy/config/verify and standardized steps.",
    "problem": "Minor mistakes or order dependencies in the rollout often caused the process to stop mid‑way across environments; consistent results required unified steps.",
    "actions": [
      "Executed the end‑to‑end flow to find where failures occurred.",
      "Standardized repeated operations so anyone could reproduce the same result.",
      "From case studies, found locale timing impacted success; proposed step re‑ordering."
    ],
    "result": "Full automation wasn’t reached yet, but failure‑prone steps and cautions were clarified, forming a basis for next improvements.",
    "tech": [
      "Azure",
      "YAML"
    ],
    "tags": [
      "Platform",
      "Automation"
    ],
    "links": []
  },
  {
    "slug": "yui-consulting",
    "title": "Yui Consulting",
    "period": "Sep 2024 – Dec 2024",
    "role": "Solo",
    "summary": "Migrated a medical fee printing feature from Access to DRS; built mappings and converters to match numbers and layout.",
    "problem": "Access reports used proprietary layouts that couldn’t be reproduced as‑is in DRS. Code/master differences risked numeric mismatches, and no migration procedures/tools existed.",
    "actions": [
      "Created a 1:1 field mapping between Access and DRS, defining required fields, code conversion, and length constraints.",
      "Developed converters: extracted source via Access VBA, implemented a production C#/.NET program; normalized wide/halfwidth and date formats; made reruns idempotent.",
      "Validated printing via a prepared template: checked page breaks/margins in PDF & printer output; verified counts/amounts with a checker."
    ],
    "result": "Counts and amounts matched between Access and DRS outputs; page breaks/margins matched in both PDF and paper. The program and mappings remain reusable for other report migrations.",
    "tech": [
      "C# (.NET)",
      "VBA (Access)",
      "Excel",
      "Access",
      "PDF/Printer validation"
    ],
    "tags": [
      "Data Migration",
      "Healthcare",
      "Reports"
    ],
    "links": []
  }
]